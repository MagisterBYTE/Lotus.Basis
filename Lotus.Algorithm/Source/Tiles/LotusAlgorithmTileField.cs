//=====================================================================================================================
// Проект: Модуль алгоритмов
// Раздел: Подсистема тайлов
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusAlgorithmTileField.cs
*		Интерфейс определения поля для размещения тайлов.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
using System.Collections.Generic;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace Algorithm
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup AlgorithmTile
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс определения поля для размещения тайлов
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusField
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Событие нажатие на ячейку поля
			/// </summary>
			Action<ILotusFieldCell> OnCellDown { get; set; }

			/// <summary>
			/// Событие отпускание ячейки поля
			/// </summary>
			Action<ILotusFieldCell> OnCellUp { get; set; }

			/// <summary>
			/// Событие щелчок по ячейки поля
			/// </summary>
			Action<ILotusFieldCell> OnCellClick { get; set; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			/// <summary>
			/// Получить ячейку поля по координатам
			/// </summary>
			/// <param name="x">Координата ячейки по X</param>
			/// <param name="y">Координата ячейки по Y</param>
			/// <returns>Ячейка поля</returns>
			ILotusFieldCell GetCell(Int32 x, Int32 y);

			/// <summary>
			/// Споско ячеек
			/// </summary>
			IList<ILotusFieldCell> ICells { get; }
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий функциональность поля для размещения тайлов
		/// </summary>
		/// <typeparam name="TCell">Тип ячейки поля</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class CFieldBase<TCell> : ILotusField where TCell : ILotusFieldCell
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal ListArray<TCell> mCells;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Все ячейки поля
			/// </summary>
			public IList<ILotusFieldCell> ICells
			{
				get { return (IList<ILotusFieldCell>)mCells; }
			}

			/// <summary>
			/// Все ячейки поля
			/// </summary>
			public ListArray<TCell> Cells
			{
				get { return mCells; }
			}

			/// <summary>
			/// Событие нажатие на ячейку поля
			/// </summary>
			public Action<ILotusFieldCell> OnCellDown { get; set; }

			/// <summary>
			/// Событие отпускание ячейки поля
			/// </summary>
			public Action<ILotusFieldCell> OnCellUp { get; set; }

			/// <summary>
			/// Событие щелчок по ячейки поля
			/// </summary>
			public Action<ILotusFieldCell> OnCellClick { get; set; }
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CFieldBase()
			{
				mCells = new ListArray<TCell>();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="capacity">Начальная максимальная емкость списка</param>
			//---------------------------------------------------------------------------------------------------------
			public CFieldBase(Int32 capacity)
			{
				mCells = new ListArray<TCell>(capacity);
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================

			#endregion

			#region ======================================= МЕТОДЫ ILotusFieldCell ====================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получить ячейку поля по координатам
			/// </summary>
			/// <param name="x">Координата ячейки по X</param>
			/// <param name="y">Координата ячейки по Y</param>
			/// <returns></returns>
			//---------------------------------------------------------------------------------------------------------
			public ILotusFieldCell GetCell(Int32 x, Int32 y)
			{
				for (var i = 0; i < mCells.Count; i++)
				{
					if(mCells[i].CellCoordinateX == x && mCells[i].CellCoordinateY == y)
					{
						return mCells[i];
					}
				}

				return null;
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий функциональность поля для размещения тайлов
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CFieldBase : CFieldBase<CFieldCellBase>
		{
			#region ======================================= СТАТИЧЕСКИЕ МЕТОДЫ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание прямоугольного поля 
			/// </summary>
			/// <remarks>
			/// Порядок ячеек
			/// 0,1,2,3,4
			/// 5,6,7,8,9
			/// </remarks>
			/// <param name="countX">Размер поля по X</param>
			/// <param name="countY">Размер поля по Y</param>
			/// <returns></returns>
			//---------------------------------------------------------------------------------------------------------
			public static CFieldBase CreateSquare(Int32 countX, Int32 countY)
			{
				var fieldBase = new CFieldBase(countX * countY);
				for (var y = 0; y < countY; y++)
				{
					for (var x = 0; x < countX; x++)
					{
						fieldBase.Cells.Add(new CFieldCellBase(x, y, fieldBase));
					}
				}

				return fieldBase;
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CFieldBase()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="capacity">Начальная максимальная емкость списка</param>
			//---------------------------------------------------------------------------------------------------------
			public CFieldBase(Int32 capacity)
				: base(capacity)
			{
			}
			#endregion
		}		
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================