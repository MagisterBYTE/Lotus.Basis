//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема общих типов
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusObservedValues.cs
*		Базовые типы данных с информированием об изменении значений.
*		Реализация нескольких базовых типов с информированием об изменении своих значений. Иногда целесообразно информировать
*	не обо всех изменениях объекта, а только об изменении его определенных свойств. В таких случая, для таких свойств,
*	лучше использовать типы объекты которых информируют об изменении своего значения.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup CoreCommonTypes
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Логический тип который информирует об изменении своего значения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public struct BoolObserved : IEquatable<BoolObserved>, IComparable<BoolObserved>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ МЕТОДЫ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Десереализация объекта из строки
			/// </summary>
			/// <param name="data">Строка данных</param>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public static BoolObserved DeserializeFromString(String data)
			{
				var value = new BoolObserved();
				value.SetValue(XBoolean.Parse(data));
				return value;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if UNITY_2017_1_OR_NEWER
			[UnityEngine.SerializeField]
#endif
			internal Boolean _value;
			[NonSerialized]
			internal Action<Boolean>? _onChanged;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значение
			/// </summary>
			public Boolean Value
			{
				readonly get { return _value; }
				set
				{
					if (_value != value)
					{
						_value = value;
						if (_onChanged != null) _onChanged(_value);
					}
				}
			}

			/// <summary>
			/// Событие для нотификации об изменении значения
			/// </summary>
			public Action<Boolean>? OnChanged
			{
				readonly get { return _onChanged; }
				set { _onChanged = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public BoolObserved(Boolean value)
			{
				_value = value;
				_onChanged = null;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			/// <param name="onChanged">Обработчик события изменения значения</param>
			//---------------------------------------------------------------------------------------------------------
			public BoolObserved(Boolean value, Action<Boolean> onChanged)
			{
				_value = value;
				_onChanged = onChanged;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Boolean Equals(System.Object? obj)
			{
				if (obj != null)
				{
					if (obj is BoolObserved value)
					{
						return Equals(value);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства объектов по значению
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Boolean Equals(BoolObserved other)
			{
				return _value == other._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Int32 CompareTo(BoolObserved other)
			{
				return _value.CompareTo(other._value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода объекта
			/// </summary>
			/// <returns>Хеш-код объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Int32 GetHashCode()
			{
				return _value.GetHashCode() ^ base.GetHashCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly System.Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly String ToString()
			{
				return _value.ToString();
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на равенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус равенства</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(BoolObserved left, BoolObserved right)
			{
				return left.Equals(right);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на неравенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус неравенство</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(BoolObserved left, BoolObserved right)
			{
				return !(left == right);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="System.Boolean"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="System.Boolean"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator Boolean(BoolObserved value)
			{
				return value._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="BoolObserved"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="BoolObserved"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator BoolObserved(Boolean value)
			{
				return new BoolObserved(value);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Непосредственная установка значения без информирования
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public void SetValue(Boolean value)
			{
				_value = value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование об изменение значения
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public readonly void ChangedValue()
			{
				if (_onChanged != null) _onChanged(_value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сериализация объекта в строку
			/// </summary>
			/// <returns>Строка данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly String SerializeToString()
			{
				return _value.ToString();
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Целочисленный тип который информирует об изменении своего значения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public struct IntObserved : IEquatable<IntObserved>, IComparable<IntObserved>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ МЕТОДЫ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Десереализация объекта из строки
			/// </summary>
			/// <param name="data">Строка данных</param>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public static IntObserved DeserializeFromString(String data)
			{
				var value = new IntObserved();
				value.SetValue(Int32.Parse(data));
				return value;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if UNITY_2017_1_OR_NEWER
			[UnityEngine.SerializeField]
#endif
			internal Int32 _value;
			[NonSerialized]
			internal Action<Int32>? _onChanged;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значение
			/// </summary>
			public Int32 Value
			{
				readonly get { return _value; }
				set
				{
					if (_value != value)
					{
						_value = value;
						if (_onChanged != null) _onChanged(_value);
					}
				}
			}

			/// <summary>
			/// Событие для нотификации об изменении значения
			/// </summary>
			public Action<Int32>? OnChanged
			{
				readonly get { return _onChanged; }
				set { _onChanged = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public IntObserved(Int32 value)
			{
				_value = value;
				_onChanged = null;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			/// <param name="onChanged">Обработчик события изменения значения</param>
			//---------------------------------------------------------------------------------------------------------
			public IntObserved(Int32 value, Action<Int32> onChanged)
			{
				_value = value;
				_onChanged = onChanged;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Boolean Equals(System.Object? obj)
			{
				if (obj != null)
				{
					if (obj is IntObserved value)
					{
						return Equals(value);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства объектов по значению
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Boolean Equals(IntObserved other)
			{
				return _value == other._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Int32 CompareTo(IntObserved other)
			{
				return _value.CompareTo(other._value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода объекта
			/// </summary>
			/// <returns>Хеш-код объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Int32 GetHashCode()
			{
				return _value.GetHashCode() ^ base.GetHashCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly System.Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly String ToString()
			{
				return _value.ToString();
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на равенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус равенства</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(IntObserved left, IntObserved right)
			{
				return left.Equals(right);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на неравенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус неравенство</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(IntObserved left, IntObserved right)
			{
				return !(left == right);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="System.Int32"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="System.Int32"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator Int32(IntObserved value)
			{
				return value._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="IntObserved"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="IntObserved"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator IntObserved(Int32 value)
			{
				return new IntObserved(value);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Непосредственная установка значения без информирования
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public void SetValue(Int32 value)
			{
				_value = value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование об изменение значения
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public readonly void ChangedValue()
			{
				if (_onChanged != null) _onChanged(_value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сериализация объекта в строку
			/// </summary>
			/// <returns>Строка данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly String SerializeToString()
			{
				return _value.ToString();
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Вещественный тип который информирует об изменении своего значения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public struct SingleObserved : IEquatable<SingleObserved>, IComparable<SingleObserved>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ МЕТОДЫ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Десереализация объекта из строки
			/// </summary>
			/// <param name="data">Строка данных</param>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public static SingleObserved DeserializeFromString(String data)
			{
				var value = new SingleObserved();
				value.SetValue(XNumbers.ParseSingle(data));
				return value;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if UNITY_2017_1_OR_NEWER
			[UnityEngine.SerializeField]
#endif
			internal Single _value;
			[NonSerialized]
			internal Action<Single>? _onChanged;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значение
			/// </summary>
			public Single Value
			{
				readonly get { return _value; }
				set
				{
					if (_value != value)
					{
						_value = value;
						if (_onChanged != null) _onChanged(_value);
					}
				}
			}

			/// <summary>
			/// Событие для нотификации об изменении значения
			/// </summary>
			public Action<Single>? OnChanged
			{
				readonly get { return _onChanged; }
				set { _onChanged = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public SingleObserved(Single value)
			{
				_value = value;
				_onChanged = null;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			/// <param name="onChanged">Обработчик события изменения значения</param>
			//---------------------------------------------------------------------------------------------------------
			public SingleObserved(Single value, Action<Single> onChanged)
			{
				_value = value;
				_onChanged = onChanged;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Boolean Equals(System.Object? obj)
			{
				if (obj != null)
				{
					if (obj is SingleObserved value)
					{
						return Equals(value);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства объектов по значению
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Boolean Equals(SingleObserved other)
			{
				return _value == other._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Int32 CompareTo(SingleObserved other)
			{
				return _value.CompareTo(other._value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода объекта
			/// </summary>
			/// <returns>Хеш-код объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Int32 GetHashCode()
			{
				return _value.GetHashCode() ^ base.GetHashCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly System.Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly String ToString()
			{
				return _value.ToString();
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на равенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус равенства</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(SingleObserved left, SingleObserved right)
			{
				return left.Equals(right);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на неравенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус неравенство</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(SingleObserved left, SingleObserved right)
			{
				return !(left == right);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="System.Single"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="System.Single"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator Single(SingleObserved value)
			{
				return value._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="SingleObserved"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="SingleObserved"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator SingleObserved(Single value)
			{
				return new SingleObserved(value);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Непосредственная установка значения без информирования
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public void SetValue(Single value)
			{
				_value = value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование об изменение значения
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public readonly void ChangedValue()
			{
				if (_onChanged != null) _onChanged(_value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сериализация объекта в строку
			/// </summary>
			/// <returns>Строка данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly String SerializeToString()
			{
				return _value.ToString();
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Строковый тип который информирует об изменении своего значения
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public struct StringObserved : IEquatable<StringObserved>, IComparable<StringObserved>, ICloneable
		{
			#region ======================================= СТАТИЧЕСКИЕ МЕТОДЫ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Десереализация объекта из строки
			/// </summary>
			/// <param name="data">Строка данных</param>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public static StringObserved DeserializeFromString(String data)
			{
				var value = new StringObserved(data);
				return value;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
#if UNITY_2017_1_OR_NEWER
			[UnityEngine.SerializeField]
#endif
			internal String _value;
			[NonSerialized]
			internal Action<String>? _onChanged;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значение
			/// </summary>
			public String Value
			{
				readonly get { return _value; }
				set
				{
					if (_value != value)
					{
						_value = value;
						if (_onChanged != null) _onChanged(_value);
					}
				}
			}

			/// <summary>
			/// Событие для нотификации об изменении значения
			/// </summary>
			public Action<String>? OnChanged
			{
				readonly get { return _onChanged; }
				set { _onChanged = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public StringObserved(String value)
			{
				_value = value;
				_onChanged = null;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="value">Значение</param>
			/// <param name="onChanged">Обработчик события изменения значения</param>
			//---------------------------------------------------------------------------------------------------------
			public StringObserved(String value, Action<String> onChanged)
			{
				_value = value;
				_onChanged = onChanged;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Boolean Equals(System.Object? obj)
			{
				if (obj != null)
				{
					if (obj is StringObserved value)
					{
						return Equals(value);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства объектов по значению
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Boolean Equals(StringObserved other)
			{
				return _value == other._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly Int32 CompareTo(StringObserved other)
			{
				return String.CompareOrdinal(_value, other._value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода объекта
			/// </summary>
			/// <returns>Хеш-код объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly Int32 GetHashCode()
			{
				return _value.GetHashCode() ^ base.GetHashCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly System.Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override readonly String ToString()
			{
				return _value.ToString();
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на равенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус равенства</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(StringObserved left, StringObserved right)
			{
				return left.Equals(right);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов на неравенство
			/// </summary>
			/// <param name="left">Первый объект</param>
			/// <param name="right">Второй объект</param>
			/// <returns>Статус неравенство</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(StringObserved left, StringObserved right)
			{
				return !(left == right);
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="System.String"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="System.String"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator String(StringObserved value)
			{
				return value._value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа <see cref="StringObserved"/>
			/// </summary>
			/// <param name="value">Значение</param>
			/// <returns>Объект <see cref="StringObserved"/></returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator StringObserved(String value)
			{
				return new StringObserved(value);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Непосредственная установка значения без информирования
			/// </summary>
			/// <param name="value">Значение</param>
			//---------------------------------------------------------------------------------------------------------
			public void SetValue(String value)
			{
				_value = value;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Информирование об изменение значения
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public readonly void ChangedValue()
			{
				if (_onChanged != null) _onChanged(_value);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сериализация объекта в строку
			/// </summary>
			/// <returns>Строка данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public readonly String SerializeToString()
			{
				return _value;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================