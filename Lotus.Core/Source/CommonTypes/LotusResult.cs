//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема общих типов
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusResult.cs
*		Определение класса для представления результата.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Threading.Tasks;
#if NET6_0_OR_GREATER
using System.ComponentModel.DataAnnotations;
#endif
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CoreCommonTypes
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс для формирования результатов
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XResult
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата о неуспешности выполнения метода
			/// </summary>
			/// <typeparam name="TSuccessfully">Тип объекта</typeparam>
			/// <param name="code">Код</param>
			/// <param name="name">Наименование</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Task<CResult<TSuccessfully>> Failed<TSuccessfully>(Int32 code, String name)
			{
				return Task.FromResult(new CResult<TSuccessfully>(code, name, default));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата о успешности выполнения метода
			/// </summary>
			/// <typeparam name="TSuccessfully">Тип объекта</typeparam>
			/// <param name="result">Объект</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Task<CResult<TSuccessfully>> Succeed<TSuccessfully>(TSuccessfully result)
			{
				return Task.FromResult(new CResult<TSuccessfully>(result));
			}
		}
		
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс определяющий некий результат работы метода
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CResult : ICloneable
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Идентификатор
			/// </summary>
#if NET6_0_OR_GREATER
			[Key]
			[Required]
#endif
			public Int32 Id { get; set; }

			/// <summary>
			/// Код
			/// </summary>
			public Int32 Code { get; set; }

			/// <summary>
			/// Наименование
			/// </summary>
			public String Name { get; set; }

			/// <summary>
			/// Статус успешности
			/// </summary>
			public virtual Boolean Succeeded { get { return Code == 0; } }
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные поверхности предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CResult()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Идентификатор</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(Int32 id)
			{
				Id = id;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Наименование</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(String name)
			{
				Name = name;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="code">Код</param>
			/// <param name="name">Наименование</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(Int32 code, String name)
			{
				Code = code;
				Name = name;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Идентификатор</param>
			/// <param name="code">Код</param>
			/// <param name="name">Наименование</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(Int32 id, Int32 code, String name)
			{
				Id = id;
				Code = code;
				Name = name;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Полное копирование объекта
			/// </summary>
			/// <returns>Копия объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public System.Object Clone()
			{
				return MemberwiseClone();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (Name);
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс определяющий некий результат работы метода и объект в случае успешности выполнения
		/// </summary>
		/// <typeparam name="TSuccessfully">Тип объекта</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class CResult<TSuccessfully> : CResult
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Объект
			/// </summary>
			public TSuccessfully Successfully { get; set; }
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные поверхности предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CResult()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Идентификатор</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(Int32 id)
				: base(id)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="successfully">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(TSuccessfully successfully)
			{
				Successfully = successfully;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Наименование</param>
			/// <param name="successfully">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(String name, TSuccessfully successfully)
				: base(name)
			{
				Successfully = successfully;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="code">Код</param>
			/// <param name="name">Наименование</param>
			/// <param name="successfully">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(Int32 code, String name, TSuccessfully successfully)
				:base(code, name)
			{
				Successfully = successfully;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Идентификатор</param>
			/// <param name="code">Код</param>
			/// <param name="name">Наименование</param>
			/// <param name="successfully">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public CResult(Int32 id, Int32 code, String name, TSuccessfully successfully)
				: base(id, code, name)
			{
				Successfully = successfully;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление объекта</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (Name);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================