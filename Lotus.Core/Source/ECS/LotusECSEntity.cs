//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема ECS
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusECSEntity.cs
*		Определение сущности в подсистеме ECS.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup CoreECS Подсистема ECS
         * \ingroup Core
         * \brief Подсистема ECS - это архитектурный шаблон представления объектов как правило игрового мира. ECS состоит из
			сущностей, к которым прикреплены компоненты содержащие данные, и системами, которые работают
			с компонентами сущностей. 
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения сущности
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusEcsEntity
		{
			/// <summary>
			/// Идентификатор сущности
			/// </summary>
			/// <remarks>
			/// Является уникальным в пределах одного мира
			/// </remarks>
			Int32 Id { get; }

			/// <summary>
			/// Статус активности сущности
			/// </summary>
			/// <remarks>
			/// Только активные сущности обрабатываются системами
			/// </remarks>
			Boolean IsEnabled { get; set; }

			/// <summary>
			/// Слой расположения сущности
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			Byte Layer { get; set; }

			/// <summary>
			/// Тег сущности
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			Byte Tag { get; set; }

			/// <summary>
			/// Группа, которой принадлежит сущность
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			Byte Group { get; set; }

			/// <summary>
			/// Статус маркировки сущности
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			Byte Marked { get; set; }

			/// <summary>
			/// Количество компонентов 
			/// </summary>
			Int32 ComponentCount { get; }

			/// <summary>
			/// Статус уничтожения сущности
			/// </summary>
			Boolean IsDestroyed { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Сущность
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public struct TEcsEntity : ILotusEcsEntity, IEquatable<TEcsEntity>, IComparable<TEcsEntity>
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			internal Int32 mId;
			internal Boolean mIsEnabled;
			internal Byte mLayer;
			internal Byte mTag;
			internal Byte mGroup;
			internal Byte mMarked;
			internal Int32 mComponentCount;
			internal Boolean mIsDestroyed;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Идентификатор сущности
			/// </summary>
			/// <remarks>
			/// Является уникальным в пределах одного мира
			/// </remarks>
			public Int32 Id 
			{ 
				get 
				{
					return (mId);
				}
			}

			/// <summary>
			/// Статус активности сущности
			/// </summary>
			/// <remarks>
			/// Только активные сущности обрабатываются системами
			/// </remarks>
			public Boolean IsEnabled
			{
				get
				{
					return (mIsEnabled);
				}
				set
				{
					mIsEnabled = value;
				}
			}

			/// <summary>
			/// Слой расположения сущности
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			public Byte Layer
			{
				get
				{
					return (mLayer);
				}
				set
				{
					mLayer = value;
				}
			}

			/// <summary>
			/// Тег сущности
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			public Byte Tag
			{
				get
				{
					return (mTag);
				}
				set
				{
					mTag = value;
				}
			}

			/// <summary>
			/// Группа, которой принадлежит сущность
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			public Byte Group
			{
				get
				{
					return (mGroup);
				}
				set
				{
					mGroup = value;
				}
			}

			/// <summary>
			/// Статус маркировки сущности
			/// </summary>
			/// <remarks>
			/// Является вспомогательной характеристикой сущности и используется на усмотрения пользователя
			/// </remarks>
			public Byte Marked
			{
				get
				{
					return (mMarked);
				}
				set
				{
					mMarked = value;
				}
			}

			/// <summary>
			/// Количество компонентов 
			/// </summary>
			public Int32 ComponentCount
			{
				get
				{
					return (mComponentCount);
				}
			}

			/// <summary>
			/// Статус уничтожения сущности
			/// </summary>
			public Boolean IsDestroyed
			{
				get
				{
					return (mIsDestroyed);
				}
				set
				{
					mIsDestroyed = value;
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует сущность указанными параметрами
			/// </summary>
			/// <param name="id">Идентификатор сущности</param>
			//---------------------------------------------------------------------------------------------------------
			public TEcsEntity(Int32 id)
			{
				mId = id;
				mIsEnabled = true;
				mLayer = 0;
				mTag = 0;
				mGroup = 0;
				mMarked = 0;
				mMarked = 0;
				mComponentCount = 0;
				mIsDestroyed = false;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверяет равен ли текущий объект другому объекту того же типа
			/// </summary>
			/// <param name="obj">Сравниваемый объект</param>
			/// <returns>Статус равенства объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean Equals(Object obj)
			{
				if (obj != null)
				{
					if (typeof(TEcsEntity) == obj.GetType())
					{
						var entity = (TEcsEntity)obj;
						return Equals(entity);
					}
				}
				return base.Equals(obj);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка равенства сущностей по значению
			/// </summary>
			/// <param name="other">Сущность</param>
			/// <returns>Статус равенства сущностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public Boolean Equals(TEcsEntity other)
			{
				return (mId == other.Id);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение сущностей для упорядочивания
			/// </summary>
			/// <param name="other">Сущность</param>
			/// <returns>Статус сравнения сущностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(TEcsEntity other)
			{
				return (mId.CompareTo(other.Id));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение хеш-кода сущности
			/// </summary>
			/// <returns>Хеш-код сущности</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Int32 GetHashCode()
			{
				return mId;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Текстовое представление сущности с указанием значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return mId.ToString();
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ =================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение сущностей на равенство
			/// </summary>
			/// <param name="left">Первый сущность</param>
			/// <param name="right">Второй сущность</param>
			/// <returns>Статус равенства сущностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator ==(TEcsEntity left, TEcsEntity right)
			{
				return (left.Id == right.Id);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение сущностей на неравенство
			/// </summary>
			/// <param name="left">Первый сущность</param>
			/// <param name="right">Второй сущность</param>
			/// <returns>Статус неравенства сущностей</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator !=(TEcsEntity left, TEcsEntity right)
			{
				return (left.Id != right.Id);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Реализация лексикографического порядка отношений сущностей
			/// </summary>
			/// <param name="left">Левый сущность</param>
			/// <param name="right">Правый сущность</param>
			/// <returns>Статус меньше</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator <(TEcsEntity left, TEcsEntity right)
			{
				return (left.Id < right.Id);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Реализация лексикографического порядка отношений сущностей
			/// </summary>
			/// <param name="left">Левый сущность</param>
			/// <param name="right">Правый сущность</param>
			/// <returns>Статус больше</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean operator >(TEcsEntity left, TEcsEntity right)
			{
				return (left.Id > right.Id);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================