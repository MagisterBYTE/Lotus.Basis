//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема идентификаторов
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusIdentifierId.cs
*		Определение шаблонного и базового класса для сущностей поддерживающих идентификатор.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
using System.ComponentModel;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup CoreIdentifiers
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблонный класс для простых сущностей поддерживающих идентификатор
		/// </summary>
		/// <typeparam name="TKey">Тип идентификатор</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class IdentifierDtoId<TKey> : ILotusIdentifierIdTemplate<TKey> where TKey : IEquatable<TKey>
		{
			/// <summary>
			/// Ключ сущности
			/// </summary>
			public TKey Id { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Шаблонный класс для сущностей поддерживающих идентификатор
		/// </summary>
		/// <typeparam name="TKey">Тип идентификатор</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class IdentifierId<TKey> : PropertyChangedBase, ILotusIdentifierIdTemplate<TKey> where TKey : IEquatable<TKey>
		{
			#region ======================================= ДАННЫЕ ====================================================
#if UNITY_2017_1_OR_NEWER
			[UnityEngine.SerializeField]
			[UnityEngine.HideInInspector]
#endif
			protected internal TKey mId;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			//
			// ИДЕНТИФИКАЦИЯ
			//
			/// <summary>
			/// Уникальный идентификатор объекта
			/// </summary>
			[Browsable(false)]
			public virtual TKey Id
			{
				get { return mId; }
				set
				{
					mId = value;
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public IdentifierId()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Идентификатор объекта</param>
			//---------------------------------------------------------------------------------------------------------
			public IdentifierId(TKey id)
			{
				mId = id;
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Значение идентификатора</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return Id.ToString();
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий идентификацию через уникальный числовой идентификатор
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CIdentifierInt : IdentifierId<Int32>, ILotusIdentifierInt
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CIdentifierInt()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Уникальный числовой идентификатор</param>
			//---------------------------------------------------------------------------------------------------------
			public CIdentifierInt(Int32 id)
				: base(id)
			{
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый класс реализующий идентификацию через уникальный числовой идентификатор
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CIdentifierLong : IdentifierId<Int64>, ILotusIdentifierLong
		{
			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CIdentifierLong()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="id">Уникальный числовой идентификатор</param>
			//---------------------------------------------------------------------------------------------------------
			public CIdentifierLong(Int64 id)
				: base(id)
			{
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================