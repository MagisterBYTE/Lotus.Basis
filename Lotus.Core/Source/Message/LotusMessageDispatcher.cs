//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема сообщений
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusMessageDispatcher.cs
*		Центральный диспетчер для работы с сообщениями.
*		Реализация центрального диспетчера сообщений, который используется издателя по умолчанию хранит обеспечивает 
*	централизованную посылку и обработку сообщений.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup CoreMessage
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Центральный диспетчер для работы с сообщениями
		/// </summary>
		/// <remarks>
		/// Реализация центрального диспетчера сообщений, который используется издателя по умолчанию хранит обеспечивает
		/// централизованную посылку и обработку сообщений.
		/// Методы центрального диспетчера нужно вызывать вручную в соответствующих местах
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public static class XMessageDispatcher
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Имя издателя по умолчанию
			/// </summary>
			public const String DefaultName = "Default";
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			private static ListArray<CPublisher> mPublishers;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Список всех издателей
			/// </summary>
			public static ListArray<CPublisher> Publishers
			{
				get 
				{
					if(mPublishers == null)
					{
						OnInit();
					}
					return (mPublishers);
				}
			}

			/// <summary>
			/// Издатель по умолчанию
			/// </summary>
			public static CPublisher Default
			{
				get 
				{
					return (Publishers[0]); 
				}
			}
			#endregion

			#region ======================================= ОСНОВНЫЕ МЕТОДЫ ДИСПЕТЧЕРА ================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перезапуск данных центрального диспетчера в режиме редактора
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public static void OnResetEditor()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Первичная инициализация данных центрального диспетчера для работы с сообщениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public static void OnInit()
			{
				if (mPublishers == null)
				{
					mPublishers = new ListArray<CPublisher>();
					mPublishers.Add(new CPublisher(DefaultName));
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обработка сообщений
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public static void OnUpdate()
			{
				for (var i = 0; i < mPublishers.Count; i++)
				{
					mPublishers[i].OnUpdate();
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusMessageHandler ===============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Регистрация подписки на обработку сообщений
			/// </summary>
			/// <param name="message_handler">Интерфейс для обработки сообщений</param>
			//---------------------------------------------------------------------------------------------------------
			public static void RegisterMessageHandler(ILotusMessageHandler message_handler)
			{
				Default.RegisterMessageHandler(message_handler);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена регистрации подписки на обработку сообщений
			/// </summary>
			/// <param name="message_handler">Интерфейс для обработки сообщений</param>
			//---------------------------------------------------------------------------------------------------------
			public static void UnRegisterMessageHandler(ILotusMessageHandler message_handler)
			{
				Default.UnRegisterMessageHandler(message_handler);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Послать сообщения
			/// </summary>
			/// <param name="message">Аргументы сообщения</param>
			//---------------------------------------------------------------------------------------------------------
			public static void SendMessage(CMessageArgs message)
			{
				Default.SendMessage(message);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Послать сообщения
			/// </summary>
			/// <param name="name">Имя сообщения</param>
			/// <param name="data">Данные сообщения</param>
			/// <param name="sender">Источник сообщения</param>
			//---------------------------------------------------------------------------------------------------------
			public static void SendMessage(String name, System.Object data, System.Object sender)
			{
				Default.SendMessage(name, data, sender);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Послать сообщения
			/// </summary>
			/// <param name="id">Уникальный идентификатор сообщения</param>
			/// <param name="data">Данные сообщения</param>
			/// <param name="sender">Источник сообщения</param>
			//---------------------------------------------------------------------------------------------------------
			public static void SendMessage(Int32 id, System.Object data, System.Object sender)
			{
				Default.SendMessage(id, data, sender);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================