//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема поддержки инспектора свойств
// Подраздел: Атрибуты для инспектора свойств
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusInspectorMethodCall.cs
*		Атрибут для определения возможности вызова метода объекта через инспектор свойств.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup CoreInspectorAttribute
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Режим вызова метода
		/// </summary>
		/// <remarks>
		/// Применяется в основном в Unity
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TMethodCallMode
		{
			/// <summary>
			/// Метод можно вызвать в любое время
			/// </summary>
			Always,

			/// <summary>
			/// Метод можно вызвать только в режиме редактора
			/// </summary>
			OnlyEditor,

			/// <summary>
			/// Метод можно вызвать только в режиме игры
			/// </summary>
			OnlyPlay
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Атрибут для определения возможности вызова метода объекта через инспектор свойств
		/// </summary>
		/// <remarks>
		/// Поддерживается до двух аргументов метода.
		/// Аргументы должны быть сопоставимы с типом <see cref="CVariant"/>.
		/// Отображение вызываемых методов в инспекторе свойств происходит после отображения всех данных
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
#if UNITY_2017_1_OR_NEWER
		public sealed class LotusMethodCallAttribute : UnityEngine.PropertyAttribute
#else
		public sealed class LotusMethodCallAttribute : Attribute
#endif
		{
			#region ======================================= ДАННЫЕ ====================================================
			internal String _displayName;
			internal Boolean _isSignature;
			internal TMethodCallMode _mode;
			internal Int32 _drawOrder;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Удобочитаемое имя метода
			/// </summary>
			/// <remarks>
			/// Если пустое значение то используется имя метода
			/// </remarks>
			public String DisplayName
			{
				get { return _displayName; }
				set { _displayName = value; }
			}

			/// <summary>
			/// Статус отображения сигнатуры метода вместе с его имением
			/// </summary>
			public Boolean IsSignature
			{
				get { return _isSignature; }
				set { _isSignature = value; }
			}

			/// <summary>
			/// Режим вызова метода
			/// </summary>
			public TMethodCallMode Mode
			{
				get { return _mode; }
				set { _mode = value; }
			}

			/// <summary>
			/// Порядок рисования метода
			/// </summary>
			public Int32 DrawOrder
			{
				get { return _drawOrder; }
				set { _drawOrder = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public LotusMethodCallAttribute()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="humanName">Удобочитаемое имя метода</param>
			/// <param name="buttonMode">Режим вызова метода</param>
			//---------------------------------------------------------------------------------------------------------
			public LotusMethodCallAttribute(String humanName, TMethodCallMode buttonMode = TMethodCallMode.Always)
			{
				_displayName = humanName;
				_mode = buttonMode;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="humanName">Удобочитаемое имя метода</param>
			/// <param name="drawOrder">Порядок отрисовки кнопки</param>
			/// <param name="buttonMode">Режим вызова метода</param>
			//---------------------------------------------------------------------------------------------------------
			public LotusMethodCallAttribute(String humanName, Int32 drawOrder, TMethodCallMode buttonMode = TMethodCallMode.Always)
			{
				_displayName = humanName;
				_drawOrder = drawOrder;
				_mode = buttonMode;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================