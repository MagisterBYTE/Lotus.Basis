//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема объектного пула
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusObjectPoolManager.cs
*		Определение интерфейсов менеджера для управления пулом объектов и его типовые реализации.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup CoreObjectPool Подсистема объектного пула
         * \ingroup Core
         * \brief Объектный пул - порождающий шаблон проектирования, набор инициализированных и готовых к использованию объектов.
		 * \details
			Когда системе требуется объект, он не создается, а берется из пула. Когда объект больше не нужен, он не
			уничтожается, а возвращается в пул. Представлена отдельно общая реализация и реализация в контексте использования игровых объектов Unity
			
			## Возможности/особенности
			1. Простая работа с пулом готовых объектов
			2. Общая и специальная реализация для Unity объектов
			
			## Описание
			Подсистема пула предназначена для более эффективной работы с объектами путем их повторного использования вместо 
			создания/уничтожения объектов при необходимости. Подсистема в первую очередь направлена на эффектность и скорость
			работы, а не удобство работы. Объекты, готовые к использованию хранятся в стеке, работа ведется через основной 
			менеджер \ref Lotus.Core.PoolManager. Основные операции являются: взять объект из пула для его использования
			(метод \ref Lotus.Core.PoolManager.Take) и положить объект который больше не нужен в пул (метод \ref Lotus.Core.PoolManager.Release)
			В реализации для Unity объектов, дополнительно, в методах Take - игровой объект активируется, в 
			методе Release - игровой объект деактивируется.

			## Использование
			1. Для обычных объектов реализовать интерфейс \ref Lotus.Core.ILotusPoolObject
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс менеджера для управления пулом объектов
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusPoolManager : ILotusNameable
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Максимальное количество объектов для пула
			/// </summary>
			/// <remarks>
			/// В случае, если по запросу объектов в пуле не будет, то это значение увеличится вдвое и создаться указанное количество объектов
			/// </remarks>
			Int32 MaxInstances { get; }

			/// <summary>
			/// Количество объектов в пуле
			/// </summary>
			Int32 InstanceCount { get; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взять готовый объект из пула
			/// </summary>
			/// <remarks>
			/// Это максимально общая и универсальная реализация
			/// </remarks>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			System.Object TakeObjectFromPool();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Освободить объект и положить его назад в пул
			/// </summary>
			/// <remarks>
			/// Это максимально общая и универсальная реализация
			/// </remarks>
			/// <param name="poolObject">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			void ReleaseObjectToPool(System.Object poolObject);
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый менеджер для управления пулом объектов
		/// </summary>
		/// <typeparam name="TPoolObject">Тип объекта пула</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class PoolManagerBase<TPoolObject> : ILotusPoolManager
		{
			#region ======================================= ДАННЫЕ ====================================================
			protected internal String _name = "";
			protected internal Int32 _maxInstances = 20;
			protected internal StackArray<TPoolObject> _poolObjects;
			protected internal Func<TPoolObject> _constructor;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Наименование менеджера
			/// </summary>
			public String Name
			{
				get { return _name; }
				set { _name = value; }
			}

			/// <summary>
			/// Максимальное количество объектов для пула
			/// </summary>
			public Int32 MaxInstances
			{
				get { return _maxInstances; }
			}

			/// <summary>
			/// Количество объектов в пуле
			/// </summary>
			public Int32 InstanceCount
			{
				get { return _poolObjects.Count; }
			}

			/// <summary>
			/// Конструктор для создания объектов пула
			/// </summary>
			public Func<TPoolObject> Constructor
			{
				get { return _constructor; }
				set { _constructor = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public PoolManagerBase()
			{
				_poolObjects = new StackArray<TPoolObject>(_maxInstances);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="maxInstance">Максимальное количество объектов для пула</param>
			//---------------------------------------------------------------------------------------------------------
			public PoolManagerBase(Int32 maxInstance)
			{
				_maxInstances = maxInstance;
				_poolObjects = new StackArray<TPoolObject>(_maxInstances);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="maxInstance">Максимальное количество объектов для пула</param>
			/// <param name="constructor">Конструктор для создания начального количества объектов пула </param>
			//---------------------------------------------------------------------------------------------------------
			public PoolManagerBase(Int32 maxInstance, Func<TPoolObject> constructor)
			{
				_maxInstances = maxInstance;
				_constructor = constructor;
				_poolObjects = new StackArray<TPoolObject>(_maxInstances);

				for (var i = 0; i < _maxInstances; i++)
				{
					_poolObjects.Push(constructor());
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusPoolManager ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взять готовый объект из пула
			/// </summary>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public System.Object TakeObjectFromPool()
			{
				return Take();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вставка объекта в пул
			/// </summary>
			/// <remarks>
			/// Применяется когда объект не нужен
			/// </remarks>
			/// <param name="poolObject">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public void ReleaseObjectToPool(System.Object poolObject)
			{
				Release((TPoolObject)poolObject);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Увеличение размера пула
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected void ResizePool()
			{
				_maxInstances = _maxInstances * 2;
				for (var i = 0; i < _maxInstances; i++)
				{
					_poolObjects.Push(_constructor());
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взять готовый объект из пула
			/// </summary>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual TPoolObject Take()
			{
				if (_poolObjects.Count == 0 && _constructor != null)
				{
					ResizePool();
				}

				TPoolObject pool_object = _poolObjects.Pop();
				return pool_object;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Освободить объект и положить его назад в пул
			/// </summary>
			/// <remarks>
			/// Применяется когда объект не нужен
			/// </remarks>
			/// <param name="poolObject">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Release(TPoolObject poolObject)
			{
				_poolObjects.Push(poolObject);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Очистка всего пула
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Clear()
			{
				_poolObjects.Clear();
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Менеджер для управления пулом объектов с поддержкой пула
		/// </summary>
		/// <typeparam name="TPoolObject">Тип объекта пула</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class PoolManager<TPoolObject> : PoolManagerBase<TPoolObject> where TPoolObject : ILotusPoolObject
		{
			#region ======================================= ДАННЫЕ ====================================================
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public PoolManager()
				:base()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="maxInstance">Максимальное количество объектов для пула</param>
			//---------------------------------------------------------------------------------------------------------
			public PoolManager(Int32 maxInstance)
				: base(maxInstance)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="maxInstance">Максимальное количество объектов для пула</param>
			/// <param name="constructor">Конструктор для создания начального количества объектов пула </param>
			//---------------------------------------------------------------------------------------------------------
			public PoolManager(Int32 maxInstance, Func<TPoolObject> constructor)
				: base(maxInstance, constructor)
			{
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Взять готовый объект из пула
			/// </summary>
			/// <returns>Объект</returns>
			//---------------------------------------------------------------------------------------------------------
			public override TPoolObject Take()
			{
				if(_poolObjects.Count == 0 && _constructor != null)
				{
					ResizePool();
				}

				TPoolObject pool_object = _poolObjects.Pop();
				pool_object.OnPoolTake();
				return pool_object;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Освободить объект и положить его назад в пул
			/// </summary>
			/// <remarks>
			/// Применяется когда объект не нужен
			/// </remarks>
			/// <param name="poolObject">Объект</param>
			//---------------------------------------------------------------------------------------------------------
			public override void Release(TPoolObject poolObject)
			{
				poolObject.OnPoolRelease();
				_poolObjects.Push(poolObject);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================