//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема защиты
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusProtectionSingle.cs
*		Защита вещественного числа.
*		Реализация механизма защиты (шифрования/декодирование) вещественного числа.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
using System.Runtime.InteropServices;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup CoreProtection
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Структура-оболочка для защиты вещественного числа
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[StructLayout(LayoutKind.Explicit)]
		public struct TProtectionSingle
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Маска для шифрования/декодирование
			/// </summary>
			public const UInt32 XORMASK = 0XAAAAAAAA;
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			[FieldOffset(0)]
			private Single mEncryptValue;

			[FieldOffset(0)]
			private UInt32 mConvertValue;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Зашифрованное значение
			/// </summary>
			public Single EncryptedValue
			{
				get
				{
					// Обходное решение для конструктора структуры по умолчанию
					if (mConvertValue == 0 && mEncryptValue == 0)
					{
						mConvertValue = XORMASK;
					}

					return mEncryptValue;
				}
			}
			#endregion

			#region ======================================= ОПЕРАТОРЫ ПРЕОБРАЗОВАНИЯ ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в обычное вещественное число
			/// </summary>
			/// <param name="value">Структура-оболочка для защиты вещественного числа</param>
			/// <returns>Целое число</returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator Single(TProtectionSingle value)
			{
				value.mConvertValue ^= XORMASK;
				var original = value.mEncryptValue;
				value.mConvertValue ^= XORMASK;
				return original;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Неявное преобразование в объект типа структуры-оболочки для защиты вещественного числа
			/// </summary>
			/// <param name="value">Вещественное число</param>
			/// <returns>Структура-оболочка для защиты вещественного числа</returns>
			//---------------------------------------------------------------------------------------------------------
			public static implicit operator TProtectionSingle(Single value)
			{
				var protection = new TProtectionSingle();
				protection.mEncryptValue = value;
				protection.mConvertValue ^= XORMASK;
				return protection;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================