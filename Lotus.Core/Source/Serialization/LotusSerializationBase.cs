//=====================================================================================================================
// Проект: Модуль базового ядра
// Раздел: Подсистема сериализации
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusSerializationBase.cs
*		Определение общих типов, структур данных и интерфейсов подсистемы сериализации данных.
*		Подсистема сериализации данных обеспечивает альтернативный, расширенный механизм сохранения/загрузки объектов в
*	различные форматы данных с учетом возможности самостоятельно записать/прочитать объектом свои данные, сохранение и
*	восстановление ссылочных данных.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
//=====================================================================================================================
namespace Lotus
{
	namespace Core
	{
		//-------------------------------------------------------------------------------------------------------------
		/**
         * \defgroup CoreSerialization Подсистема сериализации
         * \ingroup Core
         * \brief Подсистема сериализации данных обеспечивает расширенный механизм сериализации данных в различные форматы данных.
		 * \details
			Фактически, подсистема является надстройкой над стандартным сериализатором Json, документом XML и бинарным потоком. 
			Подсистема реализует сохранение и восстановление ссылочных данных, возможность динамического связывания и
			обновление существующих объектов, а также возможности самостоятельно записать/прочитать объектом свои данные.
			
			## Возможности/особенности
			1. Простая в использовании, зависимость только от Json.NET
			2. Для каждого типа можно гибко определить объем данных для сериализации
			3. Возможность на уровне объекта самостоятельно прочитать/записать свои данные
			4. Возможность динамического связывания и обновление существующих объектов
			
			## Описание
			Подсистема основания на сериализаторах которые обеспечивают сериализацию данных в нужном формате

			## Использование
			1. Указать соответствующие атрибуты для полей и свойств которые подлежат сериализации
			2. Можно реализовать интерфейс \ref Lotus.Core.ILotusSerializeToXml или \ref Lotus.Core.ILotusSerializeToBinary
			для самостоятельной записи/чтения данных объектом в соответствующий формат.
			3. Можно реализовать интерфейс \ref Lotus.Core.ILotusSerializableObject, добавить объект в словарь \ref Lotus.Core.CBaseSerializer.SerializableObjects 
			по ключу IDKeySerial, и тогда при последующей загрузки произойдет обновление данного объекта.
			4. Для сохранения/загрузки использовать соответствующие методы \ref Lotus.Core.XSerializationDispatcher
         * @{
         */
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Формат сериализации данных
		/// </summary>
		/// <remarks>
		/// Формат сериализации данных описывает, в каком конкретно формате будут записаны данные объекта
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TSerializationFormat
		{
			/// <summary>
			/// В бинарный поток
			/// </summary>
			/// <remarks>
			/// Запланировано на будущие реализации
			/// </remarks>
			Binary,

			/// <summary>
			/// В формат XML
			/// </summary>
			/// <remarks>
			/// Основой рабочий формат
			/// </remarks>
			Xml,

			/// <summary>
			/// В формате Json
			/// </summary>
			Json
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для объектов которым необходима поддержка поиска и связывания на этапе загрузки
		/// </summary>
		/// <remarks>
		/// <para>
		/// Обычно при загрузки данных существующие данные удаляются и заменяются вновь загруженными данными.
		/// Хотя часто требуется лишь обновить существующие объекты, а иногда создание полностью объекта просто невозможно
		/// (или невозможно заменить объект сохранив всего связи).
		/// </para>
		/// <para>
		/// Если в процесс сохранения каждый объект существует и нет проблем сохранить нужный объем информации, то
		/// в процесс загрузки возникает проблема при взаимной идентификации загружаемого объекта и его оригинала который
		/// уже существуют в приложении.
		/// </para>
		/// <para>
		/// Таким образом нам нужно дополнительно сохранять идентификатор объекта чтобы потом его можно было найти в приложении
		/// и если он есть, то тогда не создавать новый объект, а лишь обновить данные существующего.
		/// </para>
		/// <para>
		/// Данный интерфейс для сериализации данных требует, от класса(пользовательского скрипта) который его реализует,
		/// определение корректного, уникального и постоянного для данного объекта сериализуемого идентификационного ключа.
		/// Данный ключ является основным для идентификации объекта и используется во многих других подсистемах
		/// </para>
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusSerializableObject
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Сериализуемый ключ объекта
			/// </summary>
			/// <remarks>
			/// Должен оставаться постоянным и уникальным на всей протяженности жизни объекта. 
			/// В случае если объект создается повторно (вследствие загрузки данных) то ключ должен инициализируется существующим значением
			/// </remarks>
			Int64 IDKeySerial { get; set; }
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================