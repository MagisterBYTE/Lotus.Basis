//=====================================================================================================================
// Проект: Модуль репозитория
// Раздел: Базовая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusRepositoryResponse.cs
*		Определение интерфейса и моделей для получения данных.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.04.2023
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace Repository
	{
		//-------------------------------------------------------------------------------------------------------------
		/** \addtogroup RepositoryBase
		*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Базовый интерфейс получения данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusResponse
		{
			/// <summary>
			/// Результат получения данных
			/// </summary>
			ILotusResult? Result { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс получения данных
		/// </summary>
		/// <typeparam name="TPayload">Тип данных</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusResponse<TPayload> : ILotusResponse
		{
			/// <summary>
			/// Данные
			/// </summary>
			TPayload Payload { get; set; }
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс для формирования ответа
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XResponse
		{
			#region ======================================= НЕУСПЕШЕЫЙ РЕЗУЛЬТАТ ======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата/ответа о неуспешности выполнения метода
			/// </summary>
			/// <param name="result">Результат/ответ</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Response Failed(Result result)
			{
				return new Response(result);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата/ответа о неуспешности выполнения метода
			/// </summary>
			/// <typeparam name="TPayload">Тип объекта</typeparam>
			/// <param name="result">Результат/ответ</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Response<TPayload> Failed<TPayload>(Result result)
			{
				return new Response<TPayload>(result);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата/ответа о неуспешности выполнения метода
			/// </summary>
			/// <typeparam name="TPayload">Тип объекта</typeparam>
			/// <param name="code">Код</param>
			/// <param name="message">Сообщение о результате выполнения метода</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Response<TPayload> Failed<TPayload>(Int32 code, String message)
			{
				return new Response<TPayload>(code, message);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата/ответа о неуспешности выполнения метода
			/// </summary>
			/// <param name="code">Код</param>
			/// <param name="message">Сообщение о результате выполнения метода</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Response Failed(Int32 code, String message)
			{
				return new Response(code, message);
			}
			#endregion

			#region ======================================= УСПЕШЕЫЙ РЕЗУЛЬТАТ ========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата о успешности выполнения метода
			/// </summary>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Response Succeed()
			{
				return Response.Ok;
			}


			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Формирование результата о успешности выполнения метода
			/// </summary>
			/// <typeparam name="TPayload">Тип объекта</typeparam>
			/// <param name="data">Объект</param>
			/// <returns>Результат</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Response<TPayload> Succeed<TPayload>(TPayload data)
			{
				return new Response<TPayload>(data);
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс для получения данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class Response : ILotusResponse
		{
			#region ======================================= КОНСТАНТНЫЕ ДАННЫЕ ========================================
			/// <summary>
			/// Результат успешного выполнения
			/// </summary>
			public static readonly Response Ok = new Response();
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Результат получения данных
			/// </summary>
			public ILotusResult? Result { get; set; }
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные поверхности предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public Response()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="result">Данные</param>
			//---------------------------------------------------------------------------------------------------------
			public Response(ILotusResult result)
			{
				Result = result;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="code">Код</param>
			/// <param name="message">Сообщение о результате выполнения метода</param>
			//---------------------------------------------------------------------------------------------------------
			public Response(Int32 code, String message)
			{
				Result = new Result(code, message, null, false);
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс для получения данных
		/// </summary>
		/// <typeparam name="TPayload">Тип данных</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class Response<TPayload> : Response, ILotusResponse<TPayload>
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Данные
			/// </summary>
			public TPayload Payload { get; set; } = default!;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует данные поверхности предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public Response()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="payload">Данные</param>
			//---------------------------------------------------------------------------------------------------------
			public Response(TPayload payload)
			{
				Payload = payload;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="result">Ответ/результат операции</param>
			//---------------------------------------------------------------------------------------------------------
			public Response(ILotusResult result)
			{
				Result = result;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="code">Код</param>
			/// <param name="message">Сообщение о результате выполнения операции</param>
			//---------------------------------------------------------------------------------------------------------
			public Response(Int32 code, String message)
			{
				Result = new Result(code, message, null, false);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/**@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================